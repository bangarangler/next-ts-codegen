[{"/home/jonathan/Desktop/flameOn/frontend/src/index.tsx":"1","/home/jonathan/Desktop/flameOn/frontend/src/context/providerComposer.js":"2","/home/jonathan/Desktop/flameOn/frontend/src/App.tsx":"3","/home/jonathan/Desktop/flameOn/frontend/src/pages/AuthGate.tsx":"4","/home/jonathan/Desktop/flameOn/frontend/src/context/allContexts/index.js":"5","/home/jonathan/Desktop/flameOn/frontend/src/context/allContexts/AxiosContext.js":"6","/home/jonathan/Desktop/flameOn/frontend/src/context/allContexts/ErrorsContext.js":"7","/home/jonathan/Desktop/flameOn/frontend/src/context/allContexts/UserContext.js":"8","/home/jonathan/Desktop/flameOn/frontend/src/components/AuthenticatedApp/AuthenticatedApp.tsx":"9","/home/jonathan/Desktop/flameOn/frontend/src/components/UnauthenticatedApp/UnauthenticatedApp.tsx":"10","/home/jonathan/Desktop/flameOn/frontend/src/constants.ts":"11","/home/jonathan/Desktop/flameOn/frontend/src/pages/private-area.tsx":"12","/home/jonathan/Desktop/flameOn/frontend/src/components/Login/Login.tsx":"13","/home/jonathan/Desktop/flameOn/frontend/src/components/Register/Register.tsx":"14","/home/jonathan/Desktop/flameOn/frontend/src/context/composibleContext/TodosSubContext.js":"15","/home/jonathan/Desktop/flameOn/frontend/src/utils/isServer.ts":"16","/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useLogout.ts":"17","/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useRegister.ts":"18","/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useLogin.ts":"19","/home/jonathan/Desktop/flameOn/frontend/src/components/Todos/Todos.tsx":"20","/home/jonathan/Desktop/flameOn/frontend/src/components/Test/Test.tsx":"21","/home/jonathan/Desktop/flameOn/frontend/src/components/Me/me.tsx":"22","/home/jonathan/Desktop/flameOn/frontend/src/utils/axiosConfig.js":"23","/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useTodos.ts":"24","/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useMe.ts":"25","/home/jonathan/Desktop/flameOn/frontend/src/components/Todos/EditTodo.tsx":"26","/home/jonathan/Desktop/flameOn/frontend/src/components/Todos/Todo.tsx":"27","/home/jonathan/Desktop/flameOn/frontend/src/components/Todos/AddNewTodo.tsx":"28","/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useEditTodo.ts":"29","/home/jonathan/Desktop/flameOn/frontend/src/utils/toErrorMap.ts":"30","/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useDeleteTodo.ts":"31","/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useAddNewTodo.ts":"32"},{"size":717,"mtime":1611253985084,"results":"33","hashOfConfig":"34"},{"size":526,"mtime":1611249091590,"results":"35","hashOfConfig":"34"},{"size":292,"mtime":1611254329229,"results":"36","hashOfConfig":"34"},{"size":932,"mtime":1611254774885,"results":"37","hashOfConfig":"34"},{"size":96,"mtime":1611249091586,"results":"38","hashOfConfig":"34"},{"size":1554,"mtime":1611255864918,"results":"39","hashOfConfig":"34"},{"size":3116,"mtime":1611249091586,"results":"40","hashOfConfig":"34"},{"size":1466,"mtime":1611250341763,"results":"41","hashOfConfig":"34"},{"size":335,"mtime":1611254789629,"results":"42","hashOfConfig":"34"},{"size":1031,"mtime":1611255055836,"results":"43","hashOfConfig":"34"},{"size":1551,"mtime":1611255903854,"results":"44","hashOfConfig":"34"},{"size":1472,"mtime":1611255321094,"results":"45","hashOfConfig":"34"},{"size":3258,"mtime":1611255141339,"results":"46","hashOfConfig":"34"},{"size":4126,"mtime":1611255278486,"results":"47","hashOfConfig":"34"},{"size":1462,"mtime":1611251803166,"results":"48","hashOfConfig":"34"},{"size":61,"mtime":1611249190870,"results":"49","hashOfConfig":"34"},{"size":1036,"mtime":1611250881682,"results":"50","hashOfConfig":"34"},{"size":1065,"mtime":1611250447412,"results":"51","hashOfConfig":"34"},{"size":853,"mtime":1611250433764,"results":"52","hashOfConfig":"34"},{"size":2852,"mtime":1611248951957,"results":"53","hashOfConfig":"34"},{"size":109,"mtime":1611248951949,"results":"54","hashOfConfig":"34"},{"size":1403,"mtime":1611248951945,"results":"55","hashOfConfig":"34"},{"size":1963,"mtime":1611250460028,"results":"56","hashOfConfig":"34"},{"size":658,"mtime":1611250896234,"results":"57","hashOfConfig":"34"},{"size":1208,"mtime":1611250888066,"results":"58","hashOfConfig":"34"},{"size":3239,"mtime":1611248951953,"results":"59","hashOfConfig":"34"},{"size":1263,"mtime":1611248951957,"results":"60","hashOfConfig":"34"},{"size":2939,"mtime":1611248951953,"results":"61","hashOfConfig":"34"},{"size":871,"mtime":1611250861090,"results":"62","hashOfConfig":"34"},{"size":258,"mtime":1611249190870,"results":"63","hashOfConfig":"34"},{"size":740,"mtime":1611250853034,"results":"64","hashOfConfig":"34"},{"size":875,"mtime":1611250845866,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"h1vsf",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"/home/jonathan/Desktop/flameOn/frontend/src/index.tsx",[],["141","142"],"/home/jonathan/Desktop/flameOn/frontend/src/context/providerComposer.js",[],["143","144"],"/home/jonathan/Desktop/flameOn/frontend/src/App.tsx",[],"/home/jonathan/Desktop/flameOn/frontend/src/pages/AuthGate.tsx",[],"/home/jonathan/Desktop/flameOn/frontend/src/context/allContexts/index.js",[],"/home/jonathan/Desktop/flameOn/frontend/src/context/allContexts/AxiosContext.js",["145"],"/home/jonathan/Desktop/flameOn/frontend/src/context/allContexts/ErrorsContext.js",[],"/home/jonathan/Desktop/flameOn/frontend/src/context/allContexts/UserContext.js",[],"/home/jonathan/Desktop/flameOn/frontend/src/components/AuthenticatedApp/AuthenticatedApp.tsx",[],"/home/jonathan/Desktop/flameOn/frontend/src/components/UnauthenticatedApp/UnauthenticatedApp.tsx",[],"/home/jonathan/Desktop/flameOn/frontend/src/constants.ts",[],"/home/jonathan/Desktop/flameOn/frontend/src/pages/private-area.tsx",["146"],"import React, { useEffect } from \"react\";\nimport { TodosSubProvider } from \"../context/composibleContext/TodosSubContext\";\nimport Cookies from \"js-cookie\";\nimport Todos from \"../components/Todos/Todos\";\nimport Me from \"../components/Me/me\";\nimport Test from \"../components/Test/Test\";\nimport { useHistory } from \"react-router-dom\";\nimport { isServer } from \"../utils/isServer\";\nimport useLogout from \"../react-query-hooks/useLogout\";\n\nconst PrivateArea = () => {\n  const history = useHistory();\n\n  const {\n    mutate: logoutMutate,\n    data: logoutData,\n    status: logoutStatus,\n  } = useLogout();\n\n  // logout function to run using custom react-query hook\n  const logout = async () => {\n    localStorage.removeItem(\"accessToken\");\n    logoutMutate();\n  };\n\n  useEffect(() => {\n    switch (logoutStatus) {\n      case \"error\":\n        console.log(\"error logging out\");\n        break;\n      case \"success\":\n        console.log(\"logoutData\", logoutData);\n        if (logoutData.success) {\n          history.go(0);\n          // history.push(\"/\");\n        }\n    }\n  }, [logoutStatus, logoutData]);\n\n  // this may not be needed anymore\n  if (!Cookies.get(\"signedin\")) {\n    if (!isServer()) {\n      history.push(\"/\");\n    }\n  }\n\n  return (\n    <>\n      <div>Private Area!</div>\n      <button onClick={() => logout()}>Logout</button>\n      <Me />\n      <TodosSubProvider>\n        <Todos />\n        <Test />\n      </TodosSubProvider>\n    </>\n  );\n};\n\nexport default PrivateArea;\n","/home/jonathan/Desktop/flameOn/frontend/src/components/Login/Login.tsx",["147"],"import { useHistory } from \"react-router-dom\";\nimport { useEffect, useReducer } from \"react\";\nimport { useAxiosContext } from \"../../context/allContexts\";\nimport { useLogin } from \"../../react-query-hooks/useLogin\";\n\n// reducer types\nimport { State, Actions } from \"./LoginTypes\";\n\nconst reducer = (state: State, action: Actions) => {\n  switch (action.type) {\n    case \"input\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nconst initState: State = {\n  email: \"\",\n  password: \"\",\n};\n\nconst Login = () => {\n  // context state / react-query mutation data\n  const { setUser, setToken } = useAxiosContext();\n  // local form state\n  const [state, dispatch] = useReducer(reducer, initState);\n  const { email, password } = state;\n  const { mutate, data, status, error } = useLogin();\n  const history = useHistory();\n\n  // this useEffect manages when a user logs in\n  useEffect(() => {\n    switch (status) {\n      case \"loading\":\n        console.log(\"loading...\");\n        break;\n      case \"idle\":\n        console.log(\"login isIdle\");\n        break;\n      case \"error\":\n        console.log(\"error from Login.tsx\", error);\n        break;\n      case \"success\":\n        // on success set cookie and push to somewhere\n        console.log(\"data\", data);\n        // if (data?.status === 404) {\n        //   console.log(\"nope that didn't work\");\n        //   return;\n        // }\n        // console.log(\"data.email\", data.email);\n        // console.log(\"data from success login!!!!!!\", data);\n        // console.log(\"data.accessToken\", data.accessToken);\n        setUser(data);\n        setToken(data.accessToken);\n        // temp\n        localStorage.setItem(\"accessToken\", data.accessToken);\n        document.cookie = \"signedin=true\";\n        history.push(\"/private-area\");\n        break;\n      default:\n        break;\n    }\n  }, [status, data]);\n\n  // submit login which will run mutate and start up useEffect above logic\n  const submitForm = async (event: any) => {\n    event.preventDefault();\n    const loginInput = { email, password };\n    mutate(loginInput as any);\n  };\n\n  return (\n    <div>\n      {data?.status === 404 && (\n        <>\n          <div>Error Could not find account</div>\n        </>\n      )}\n      {status === \"loading\" && <div>Loading...</div>}\n      <form onSubmit={submitForm}>\n        <p>\n          Email:{\" \"}\n          <input\n            type=\"text\"\n            placeholder=\"jane.smith@example.com\"\n            value={email}\n            onChange={(event) =>\n              dispatch({\n                type: \"input\",\n                field: \"email\",\n                value: event.target.value,\n              })\n            }\n          />\n        </p>\n        <p>\n          Password:{\" \"}\n          <input\n            type=\"password\"\n            onChange={(event) =>\n              dispatch({\n                type: \"input\",\n                field: \"password\",\n                value: event.target.value,\n              })\n            }\n          />\n        </p>\n        <p>\n          <button type=\"submit\" disabled={email === \"\" || password === \"\"}>\n            Login\n          </button>\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","/home/jonathan/Desktop/flameOn/frontend/src/components/Register/Register.tsx",["148"],"import { useEffect, useReducer } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAxiosContext } from \"../../context/allContexts\";\nimport { useRegister } from \"../../react-query-hooks/useRegister\";\nimport { RegisterState, RegisterActions } from \"./RegisterTypes\";\n\nconst regReducer = (state: RegisterState, action: RegisterActions) => {\n  switch (action.type) {\n    case \"input\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nconst initState: RegisterState = {\n  email: \"\",\n  password: \"\",\n  confirmPW: \"\",\n  name: \"\",\n};\n\nconst Register = () => {\n  const history = useHistory();\n  const { setUser, setToken } = useAxiosContext();\n  // local form state\n  const [regState, regDispatch] = useReducer(regReducer, initState);\n  const { email, password, confirmPW, name } = regState;\n  // don't love this figure out better pattern but much closer\n  const registerInput = { email, password, confirmPW, name };\n  // useRegister hook\n  const { mutate, data, status } = useRegister(registerInput);\n\n  // useEffect deals with useRegister hook / react-query data\n  useEffect(() => {\n    switch (status) {\n      case \"loading\":\n        console.log(\"loading...\");\n        break;\n      case \"idle\":\n        console.log(\"login isIdle\");\n        break;\n      case \"error\":\n        console.log(\"error\");\n        break;\n      case \"success\":\n        console.log(\"data\", data);\n        // on success set cookie and push to somewhere\n        // better error checking just don't care right now it's late and this is\n        // for testing\n        if (data.message === \"Must Fill All Forms out Completley\") {\n          console.log(\"REGISTER: nope that didn't work\");\n          return;\n        }\n        // set email and token in context\n        setUser(data);\n        setToken(data.accessToken);\n        // set token in localStorage for refresh logic\n        localStorage.setItem(\"accessToken\", data.accessToken);\n        document.cookie = \"signedin=true\";\n        history.push(\"/private-area\");\n        break;\n      default:\n        break;\n    }\n  }, [status, data]);\n\n  const registerSubmit = (event: any) => {\n    const registerInput = {\n      email,\n      password,\n      confirmPW,\n      name,\n    };\n    event.preventDefault();\n    mutate(registerInput as any);\n  };\n\n  return (\n    <div>\n      {data?.message === \"Must Fill All Forms out Completley\" && (\n        <>\n          <div>Error Registering</div>\n        </>\n      )}\n      {status === \"loading\" && <div>Loading...</div>}\n      <form onSubmit={registerSubmit}>\n        <p>\n          Name:\n          <input\n            type=\"text\"\n            placeholder=\"Jane Smith\"\n            value={name}\n            onChange={(e) =>\n              regDispatch({\n                type: \"input\",\n                field: \"name\",\n                value: e.target.value,\n              })\n            }\n          />\n        </p>\n        <p>\n          Email:\n          <input\n            type=\"text\"\n            placeholder=\"jane.smith@example.com\"\n            value={email}\n            onChange={(e) =>\n              regDispatch({\n                type: \"input\",\n                field: \"email\",\n                value: e.target.value,\n              })\n            }\n          />\n        </p>\n        <p>\n          Password:\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) =>\n              regDispatch({\n                type: \"input\",\n                field: \"password\",\n                value: e.target.value,\n              })\n            }\n          />\n        </p>\n        <p>\n          Confirm Password:\n          <input\n            type=\"password\"\n            value={confirmPW}\n            onChange={(e) =>\n              regDispatch({\n                type: \"input\",\n                field: \"confirmPW\",\n                value: e.target.value,\n              })\n            }\n          />\n        </p>\n        <p>\n          <button type=\"submit\">Register</button>\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default Register;\n","/home/jonathan/Desktop/flameOn/frontend/src/context/composibleContext/TodosSubContext.js",[],"/home/jonathan/Desktop/flameOn/frontend/src/utils/isServer.ts",[],"/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useLogout.ts",[],"/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useRegister.ts",[],"/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useLogin.ts",[],"/home/jonathan/Desktop/flameOn/frontend/src/components/Todos/Todos.tsx",["149"],"import { useEffect, useReducer } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n//@ts-ignore\nimport { TodoDocument } from \"../../generated/graphql\";\nimport { useTodos } from \"../../react-query-hooks/useTodos\";\nimport { useTodosSubContext } from \"../../context/composibleContext/TodosSubContext\";\nimport Todo from \"./Todo\";\nimport AddNewTodo from \"./AddNewTodo\";\nimport EditTodo from \"./EditTodo\";\nimport { TodosState, TodosActions } from \"./TodosTypes\";\n//@ts-ignore\nimport styles from \"./Todos.module.css\";\n\nconst todosReducer = (state: TodosState, action: TodosActions) => {\n  switch (action.type) {\n    case \"todoToEdit\":\n      return {\n        ...state,\n        todoToEdit: action.selectedTodo,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nconst initState: TodosState = {\n  todoToEdit: {},\n};\n\nconst TodoAddedToast = () => {\n  const { newTodoFromSub } = useTodosSubContext();\n  // console.log(\"newTodoFromSub\", newTodoFromSub);\n  return (\n    <>\n      <p>{newTodoFromSub?.name} was added</p>\n    </>\n  );\n};\n\nconst Todos = () => {\n  const { newTodoFromSub } = useTodosSubContext();\n  const { data, status, error } = useTodos();\n  const [todosState, todosDispatch] = useReducer(todosReducer, initState);\n  const { todoToEdit } = todosState;\n  // const notify = () => toast(\"Wow so easy !\");\n  const displayTodoAddedToast = () => {\n    toast.success(<TodoAddedToast />);\n  };\n\n  useEffect(() => {\n    // notify();\n    if (newTodoFromSub) {\n      displayTodoAddedToast();\n    }\n  }, [newTodoFromSub]);\n\n  useEffect(() => {\n    switch (status) {\n      case \"loading\":\n        console.log(\"todos loading...\");\n        break;\n      case \"idle\":\n        console.log(\"todos isIdle\");\n        break;\n      case \"error\":\n        console.log(\"todos error\", error);\n        // console.log(error);\n        break;\n      case \"success\":\n        console.log(\"todos\", data);\n        if (data?.todos?.error) {\n          console.log(\"error from todos\");\n          // do some visual stuff or something for errors\n        }\n        break;\n      default:\n        break;\n    }\n  }, [status, data]);\n\n  const selectTodo = (todo: any) => {\n    console.log({ todo });\n    todosDispatch({ type: \"todoToEdit\", selectedTodo: todo });\n  };\n\n  return (\n    <div className={styles.todosContainer}>\n      <ToastContainer />\n      <div className={styles.todosListWrapper}>\n        <div>List of Todos</div>\n        {data?.todos?.todos?.map((todo: TodoDocument) => {\n          return <Todo key={todo._id} todo={todo} selectTodo={selectTodo} />;\n        })}\n        <AddNewTodo />\n      </div>\n      <div className={styles.singleTodo}>\n        {todoToEdit && <Todo todo={todoToEdit} />}\n        <EditTodo todoToEdit={todoToEdit} />\n      </div>\n    </div>\n  );\n};\n\nexport default Todos;\n","/home/jonathan/Desktop/flameOn/frontend/src/components/Test/Test.tsx",[],"/home/jonathan/Desktop/flameOn/frontend/src/components/Me/me.tsx",[],"/home/jonathan/Desktop/flameOn/frontend/src/utils/axiosConfig.js",[],"/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useTodos.ts",[],"/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useMe.ts",[],"/home/jonathan/Desktop/flameOn/frontend/src/components/Todos/EditTodo.tsx",["150"],"import { useReducer, useEffect } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport { toast, ToastContainer } from \"react-toastify\";\n// import { toErrorMap } from \"../../utils/toErrorMap\";\nimport { useAxiosContext } from \"../../context/allContexts\";\nimport { useEditTodo } from \"../../react-query-hooks/useEditTodo\";\nimport { EditTodoState, EditTodoActions } from \"./EditTodoTypes\";\n\nconst editTodoReducer = (state: EditTodoState, action: EditTodoActions) => {\n  switch (action.type) {\n    case \"input\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    case \"uiError\":\n      return {\n        ...state,\n        uiError: action.payload,\n      };\n    case \"reset\":\n      return {\n        ...state,\n        name: \"\",\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nconst initState: EditTodoState = {\n  name: \"\",\n  uiError: \"\",\n};\n\nconst EditTodo = ({ todoToEdit }: any) => {\n  console.log({ todoToEdit });\n  // userData from context\n  const { user } = useAxiosContext();\n  // used to invalidate cache after updating todo\n  const qClient = useQueryClient();\n  const [editTodoState, editTodoDispatch] = useReducer(\n    editTodoReducer,\n    initState\n  );\n  // local state\n  const { name, uiError } = editTodoState;\n  // variables for mutations\n  const vars = { options: { name, userId: user?.id, todoId: todoToEdit?._id } };\n  // react-query hook\n  const { mutate, status, data, error } = useEditTodo(vars);\n\n  const FormToastError = ({ uiError }: any) => {\n    // console.log(\"toastProps\", toastProps);\n    return (\n      <>\n        <div>{uiError}</div>\n      </>\n    );\n  };\n\n  const showFormToastError = (uiError: any) => {\n    toast.error(<FormToastError uiError={uiError} />);\n  };\n\n  const submitEditTodo = async (e: any) => {\n    e.preventDefault();\n    if (!name || !user?.id || !todoToEdit?._id) {\n      editTodoDispatch({ type: \"uiError\", payload: \"Must Fill Form Out!\" });\n      showFormToastError(uiError);\n    }\n    // mutate({ name, userId: user?.id, todoId: todoToEdit?._id } as any);\n    mutate();\n  };\n\n  useEffect(() => {\n    switch (status) {\n      case \"loading\":\n        console.log(\"editTodo loading...\");\n        break;\n      case \"error\":\n        console.log(\"editTodo error...\", error);\n        break;\n      case \"success\":\n        console.log(\"editTodo\", data);\n        if (data?.editTodo?.todo) {\n          editTodoDispatch({ type: \"reset\" });\n          qClient.invalidateQueries(\"Todos\");\n        }\n        break;\n    }\n  }, [status]);\n\n  return (\n    <>\n      <ToastContainer />\n      {uiError && <div>{uiError}</div>}\n      <form onSubmit={(e) => submitEditTodo(e)}>\n        <div>\n          <label htmlFor=\"Name\">Edit Todo Name</label>\n          <input\n            type=\"text\"\n            placeholder=\"edit todo name...\"\n            value={name}\n            onChange={(e) =>\n              editTodoDispatch({\n                type: \"input\",\n                field: \"name\",\n                value: e.target.value,\n              })\n            }\n          />\n          <button type=\"submit\" disabled={!user?.id || !todoToEdit._id}>\n            Edit Todo!\n          </button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default EditTodo;\n","/home/jonathan/Desktop/flameOn/frontend/src/components/Todos/Todo.tsx",["151"],"import { FC, useEffect } from \"react\";\n//@ts-ignore\nimport { TodoDocument } from \"../../generated/graphql\";\nimport { useDeleteTodo } from \"../../react-query-hooks/useDeleteTodo\";\nimport { useQueryClient } from \"react-query\";\n//@ts-ignore\nimport styles from \"./Todo.module.css\";\n\nconst Todo: FC<TodoDocument> = ({ todo, selectTodo }) => {\n  const qClient = useQueryClient();\n  const vars = { todoId: todo._id };\n  const { mutate, status, data, error } = useDeleteTodo(vars);\n\n  const handleDelete = (todoId: string) => {\n    console.log({ todoId });\n    mutate();\n  };\n\n  useEffect(() => {\n    switch (status) {\n      case \"loading\":\n        console.log(\"loading deleteTodo\");\n        break;\n      case \"error\":\n        console.log(\"error deleteTodo\", error);\n        break;\n      case \"success\":\n        console.log(\"success deleteTodo\", data);\n        qClient.invalidateQueries(\"Todos\");\n        break;\n    }\n  }, [status, data]);\n\n  return (\n    <div key={todo._id} className={styles.todoContainer}>\n      <p onClick={() => selectTodo(todo)}>{todo.name}</p>\n      {selectTodo && (\n        <span\n          className={styles.fakeIcon}\n          onClick={() => handleDelete(todo._id)}>\n          X\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default Todo;\n","/home/jonathan/Desktop/flameOn/frontend/src/components/Todos/AddNewTodo.tsx",["152"],"import { useReducer, useEffect } from \"react\";\nimport { useQueryClient } from \"react-query\";\nimport { toErrorMap } from \"../../utils/toErrorMap\";\nimport { useAxiosContext } from \"../../context/allContexts\";\nimport { useAddNewTodo } from \"../../react-query-hooks/useAddNewTodo\";\nimport { AddNewTodoState, AddNewTodoActions } from \"./AddNewTodoTypes\";\n\nconst addNewTodoReducer = (\n  state: AddNewTodoState,\n  action: AddNewTodoActions\n) => {\n  switch (action.type) {\n    case \"input\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    case \"uiError\":\n      return {\n        ...state,\n        uiError: action.payload,\n      };\n    case \"reset\":\n      return {\n        ...state,\n        name: \"\",\n        uiError: \"\",\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nconst initState: AddNewTodoState = {\n  name: \"\",\n  uiError: \"\",\n};\n\nconst AddNewTodo = () => {\n  // userData from context\n  const { user } = useAxiosContext();\n  // used to invalidate cache after adding new todo\n  const qClient = useQueryClient();\n  const [addNewTodoState, addNewTodoDispatch] = useReducer(\n    addNewTodoReducer,\n    initState\n  );\n  // local state\n  const { name, uiError } = addNewTodoState;\n  // variables for mutations\n  const vars = { options: { name, userId: user?.id } };\n  // react-query hook\n  const { mutate, status, data, error } = useAddNewTodo(vars);\n\n  const submitAddNewTodo = async (e: any) => {\n    e.preventDefault();\n    addNewTodoDispatch({ type: \"reset\" });\n    mutate();\n  };\n\n  useEffect(() => {\n    switch (status) {\n      case \"loading\":\n        console.log(\"addNewTodo loading...\");\n        break;\n      case \"error\":\n        console.log(\"addNewTodo error...\", error);\n        break;\n      case \"success\":\n        console.log(\"AddNewTodo\", data);\n        console.log(\"here>...\", data?.addTodo?.errors);\n        if (data?.addTodo?.errors) {\n          const errors = toErrorMap(data.addTodo.errors);\n          console.log(\"errors\", errors);\n          addNewTodoDispatch({\n            type: \"uiError\",\n            payload: `${errors?.name}... ${errors?.userId}`,\n          });\n        } else if (data?.addTodo?.todo) {\n          addNewTodoDispatch({ type: \"reset\" });\n          qClient.invalidateQueries(\"Todos\");\n        }\n        break;\n    }\n  }, [status]);\n\n  return (\n    <>\n      {uiError && <div>{uiError}</div>}\n      <form onSubmit={(e) => submitAddNewTodo(e)}>\n        <div>\n          <label htmlFor=\"Name\">Todo Name</label>\n          <input\n            type=\"text\"\n            placeholder=\"enter new todo...\"\n            value={name}\n            onChange={(e) =>\n              addNewTodoDispatch({\n                type: \"input\",\n                field: \"name\",\n                value: e.target.value,\n              })\n            }\n          />\n          <button type=\"submit\">Add Todo!</button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default AddNewTodo;\n","/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useEditTodo.ts",["153"],"import { useMutation, useQueryClient } from \"react-query\";\nimport { GQL_ENDPOINT } from \"../constants\";\nimport { axios } from \"../utils/axiosConfig\";\n\nconst query = `\nmutation EditTodo($options: EditTodoInput!) {\n  editTodo(options: $options) {\n    errors {\n      source\n      message\n    }\n    error {\n      message\n    }\n    todo {\n      _id\n      userId\n      name\n    }\n  }\n}\n`;\n\nconst postEditTodo = async (query: any, variables: any) => {\n  const data = await axios.post(GQL_ENDPOINT, {\n    query,\n    variables,\n    body: JSON.stringify({ query, variables }),\n  });\n\n  if (!data) {\n    console.log(\"error from editTodo\", data);\n  }\n\n  if (data) {\n    return data.data.data;\n  }\n};\n\nexport const useEditTodo = (variables: any, onUpdates?: any) => {\n  return useMutation(\n    [\"EditTodos\", variables],\n    () => postEditTodo(query, variables),\n    onUpdates\n  );\n};\n","/home/jonathan/Desktop/flameOn/frontend/src/utils/toErrorMap.ts",[],"/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useDeleteTodo.ts",["154"],"import { useMutation, useQueryClient } from \"react-query\";\nimport { GQL_ENDPOINT } from \"../constants\";\nimport { axios } from \"../utils/axiosConfig\";\n\nconst query = `\nmutation DeleteTodo($todoId: String!) {\n  deleteTodo(todoId: $todoId)\n}\n`;\n\nconst postDeleteTodo = async (query: any, variables: any) => {\n  const data = await axios.post(GQL_ENDPOINT, {\n    query,\n    variables,\n    body: JSON.stringify({ query, variables }),\n  });\n\n  if (!data) {\n    console.log(\"error from deleteTodo\", data);\n  }\n\n  if (data) {\n    return data.data.data;\n  }\n};\n\nexport const useDeleteTodo = (variables: any, onUpdates?: any) => {\n  return useMutation(\n    [\"DeleteTodos\", variables],\n    () => postDeleteTodo(query, variables),\n    onUpdates\n  );\n};\n","/home/jonathan/Desktop/flameOn/frontend/src/react-query-hooks/useAddNewTodo.ts",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":39,"column":6,"nodeType":"161","endLine":39,"endColumn":19,"suggestions":"162"},{"ruleId":"159","severity":1,"message":"160","line":38,"column":6,"nodeType":"161","endLine":38,"endColumn":32,"suggestions":"163"},{"ruleId":"159","severity":1,"message":"164","line":69,"column":6,"nodeType":"161","endLine":69,"endColumn":20,"suggestions":"165"},{"ruleId":"159","severity":1,"message":"166","line":71,"column":6,"nodeType":"161","endLine":71,"endColumn":20,"suggestions":"167"},{"ruleId":"159","severity":1,"message":"168","line":82,"column":6,"nodeType":"161","endLine":82,"endColumn":20,"suggestions":"169"},{"ruleId":"159","severity":1,"message":"170","line":94,"column":6,"nodeType":"161","endLine":94,"endColumn":14,"suggestions":"171"},{"ruleId":"159","severity":1,"message":"172","line":32,"column":6,"nodeType":"161","endLine":32,"endColumn":20,"suggestions":"173"},{"ruleId":"159","severity":1,"message":"170","line":87,"column":6,"nodeType":"161","endLine":87,"endColumn":14,"suggestions":"174"},{"ruleId":"175","severity":1,"message":"176","line":1,"column":23,"nodeType":"177","messageId":"178","endLine":1,"endColumn":37},{"ruleId":"175","severity":1,"message":"176","line":1,"column":23,"nodeType":"177","messageId":"178","endLine":1,"endColumn":37},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["181"],["182"],"React Hook useEffect has missing dependencies: 'error', 'history', 'setToken', and 'setUser'. Either include them or remove the dependency array.",["183"],"React Hook useEffect has missing dependencies: 'history', 'setToken', and 'setUser'. Either include them or remove the dependency array.",["184"],"React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array.",["185"],"React Hook useEffect has missing dependencies: 'data', 'error', and 'qClient'. Either include them or remove the dependency array.",["186"],"React Hook useEffect has missing dependencies: 'error' and 'qClient'. Either include them or remove the dependency array.",["187"],["188"],"@typescript-eslint/no-unused-vars","'useQueryClient' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"199","fix":"203"},"Update the dependencies array to be: [history, token, user]",{"range":"204","text":"205"},"Update the dependencies array to be: [logoutStatus, logoutData, history]",{"range":"206","text":"207"},"Update the dependencies array to be: [status, data, error, setUser, setToken, history]",{"range":"208","text":"209"},"Update the dependencies array to be: [status, data, setUser, setToken, history]",{"range":"210","text":"211"},"Update the dependencies array to be: [status, data, error]",{"range":"212","text":"213"},"Update the dependencies array to be: [data, error, qClient, status]",{"range":"214","text":"215"},"Update the dependencies array to be: [status, data, error, qClient]",{"range":"216","text":"217"},{"range":"218","text":"215"},[1318,1331],"[history, token, user]",[1065,1091],"[logoutStatus, logoutData, history]",[1914,1928],"[status, data, error, setUser, setToken, history]",[2151,2165],"[status, data, setUser, setToken, history]",[2161,2175],"[status, data, error]",[2522,2530],"[data, error, qClient, status]",[915,929],"[status, data, error, qClient]",[2311,2319]]